>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Compiling Options  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

Για να φτιάξετε νέο input File με records αλλά ταυτόχρονα να κάνετε και compile τα files του προγράμματος, αρκεί να γράψετε στο terminal: make all DUP_FLG=x RECORDS=y
,όπου x=0|1 me 0 να μην επιτρέπει duplicates ενώ με το 1 επιτρέπονται.Στο y βάζετε τον αριθμό των records που θέλετε να δημιουργήσετε,πχ:1000
Αλλιώς αν θέλετε να χρησιμοποιήστε το ήδη υπάρχον input file, απλά γράψτε στο terminal: make
Eάν θέλετε απλά να φτιάξετε το input_file γράψτε: bash testFile.sh info/virusesFile.txt info/countriesFile.txt input_dir x y,
όπου τα x και y είναι τα ίδια όπως παραπάνω.

Για την εκτέλεση του προγράμματος πληκτρολογήστε: ./vaccineMonitor -c input_dir/inputFile.txt -b bloomsize
Εάν θέλετε να το τρέξετε με valgrind : valgrind --leak-check=full ./vaccineMonitor -c input_dir/inputFile.txt -b bloomsize

Για διαγραφή των εκτελέσιμων πληκτρλογήστε: make clean

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Structures  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

~> Linear Probing Hashtable για τα records των πολιτών, όπου κάθε κελί αποτελείται από ένα citizen record και pointer σε country struct

~> Doubly Linked List of lists για τις χώρες όπου κάθε κόμβος αποτελείται από το όνομα των χωρών και μία λιστα με pointers σε citizen records

~> Doubly Linked List για viruses όπου κάθε κόμβος αποτελείται από ένα struct filter, που περιέχει το όνομα της ασθένειας, 1 bloom filter και 2 skipped lists

~> Τα bloom filter και skipped lists έχουν υλοποιηθεί όπως περιγράφονται στις διάφορες πηγές που μας παρέχει η εκφώνηση και διάφορες λεπτομέρειες περιέχονται στα αντίστοιχα comments.

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Main Function   <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

H main περιέχει μία συνάρτηση findcommand για αναγνώριση εντολών από το command line.Μετα μέσω switch case παίρνω input από τον χρήστη και εκτελώ το ανάλογο query.Πρωτού όμως εκτελέσω ένα query κάνω trim το input απο whitespaces στην αρχή ή στο τέλος του string.
Τέλος εάν πληκτρολογήσετε -h το πρόγραμμα εκτυπώνει και τις δυνατές διαθέσιμες εντολές.

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Project Details  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

Στο Vaccine_Monitor_Functions.c υπάρχει μία συνάρτηση CreateDB, η οποία καλώντας την getline() σε while loop, διαβάζει γραμμή,γραμμή το input_file με τα records και καλώντας την insertCitizenRecord() εισάγουμε τον πολίτη στην "βάση δεδομένων" μας.Η insert με την σειρά της κάνει τους ανάλογους ελέγχους.Συγκεκριμένα αν έχει σαν παράμετρο flg=0 σημαίνει ότι την καλεί η CreateDB().Με βάση την εκφώνηση όταν καταχωρούμε records απο το αρχείο σε 1η φάση αν βρουμε το ίδιο ακριβώς record αλλά με δοαφορετικό action, τότε το αγνοούμε.Σε 1η φάση η 
insertCitizenRecord() προδπαθεί να εισάγει το νέο record στο hashtable των citizens. Εάν βρεθεί ίδιο id τότε επιστρέφουμε την θέση του record αυτού στο hashtable. Στην περίπτωση αυτή ελέγχουμε την εγκυρότητα του record καλώντας την βοηθητική συνάρτηση checkintegrity(), για να ξέρουμε αν θα το απορρίψουμε ή όχι.Εαν έχει σαν παράμετρο flg=1 σημαίνει ότι την εκτελούμε ένα από τα 2 queries:insertCitizen ή vaccinateNow.Στην περίπτωση αυτή ελέγχουμε έαν το πλέον "νόμιμο" record έχει παρουσία σε μία από τις 2 skipped lists του ιού.Εάν ο πολίτης έχει παρουσία στην non_vaccinated skip list, τότε τον διαγράφουμε από εκεί και τον εισάγουμε στην vaccinated skip_list(αυτό σε περίπτωση που έχουμε action=YES, ή εκτελούμε το query vaccinateNow).Σε τελική φάση η insert ελέγχει εάν υπάρχει το country στην λίστα χωρών (εάν όχι το εισάγει),ελέγχει εάν υπάρχει ο ιός στην λίστα ασθενειών (εάν όχι το εισάγει),και τέλος εισάγουμε pointer στο citizen record στην λίστα των ασθενειών με την βοηθητική συνάρτηση InsertToFilter().

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  Queries  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

~>vaccineStatusBloom: Καλώ την συνάρτηση Search() του αντιστοιχου bloom filter η οποία με μια σύγκριση των τιμών στα κελία του bf με τις τιμές που παράγουν τα hashes, εξάγουμε και τα αντίστοιχα αποτελέσματα.

~> vaccineStatus citizenID virusName: καλώ την συνάρτηση skiplist_search() και ψάχνω στην vaccinated skip list το citizenId που δόθηκε σαν παράμετρος.Εάν βρεθεί τυπώνω και την ημερομηνία που εμβολιάστηκε,την οποία και σώζω στo skip list node, αλλιώς το μήνυμα no

~> vaccineStatus citizenID: Παρόμοιος τρόπος υλοποίησης με την προηγούμενη συνάρτηση αλλά τώρα καλώ την vaccineStatusAllViruses() όπου κάνοντας iterate την λίστα των ασθενειών καλώ για την κάθε αντίστοιχη vaccinated skip list για το citizen Id που μας δόθηκε.Για κάθε ιό κάνω και την αντίστοιχη εκτύπωση.

~> populationStatus [country] virusName date1 date2: Εάν δωθεί country name καλώ την συνάρτηση Percentage_Virus_Country(), η οποία με την σειρά της καλεί 2 φορές την skiplist_dump,μία για την vaccinated και μία για την nonvaccinated προκειμένου να βγάλουμε το επιθυμητό ποσοστό.Εάν δεν δοθεί χώρα τότε καλώ την skiplist_allcountries(),μία για vaccinated,μία για non_vaccinated, όπου δημιουργώ έναν στατικό πίνακα μεγέθους ίδιου με το size της λίστας countries.Το index του κάθε κελιού αντιστοιχεί και στο αντίστοιχο id της χώρας.Σε κάθε κελί κάνω store ένα counter για το sum των ανθρώπων της κάθε χώρας που έχουν ή δεν έχουν αντίστοιχα εμβολιαστεί.

~> popStatusByAge [country] virusName date1 date2: Ακολουθεί παρόμοια λογική με την populationStatus, μόνο που στην περίπτωση που δοθεί χώρα σαν όρισμα ,καλώ την συνάρτηση Percentage_Virus_Country_age_grp(), όπου δημιουργώ ένα στατικό πίνακα 4 θέσεων,1 για το κάθε ηλικιακο group. Με τις κατάλληλες συγκρίσεις για τις ημερομηνίες και ηλικίες αυξάνω τον αντίστοιχο counter κάθε φορά για το ανάλογο ηλικιακό group.Eάν δεν δοθεί χώρα, καλώ την skiplist_allcountries_age_grps(), η οποία επίσης αλγοριθμικά ακολουθεί την 'ίδια λογική με τις συγκρίσεις αλλά τώρα δημιουργώ έναν 2d array.Το index του κάθε column αντιστοιχεί και στο id μιας χώρας ενώ έχουμε 4 rows όπου το καθένα αναπαριστά ένα διαφορετικό ηλικιακό group.

~-> Tα insertCitizenRecord citizenID firstName lastName country age virusName YES/NO [date] και vaccinateNow citizenID firstName lastName country age virusName περιγράγονται στα project details.

~> list-nonVaccinated-Persons virusName: Για την ασθένεια που δέχεται σαν όρισμα, παίρνω το non_vaccinated skip list και με παρόμοια λπύπα σαν της skiplist_dump τυπώνει τα στοιχεία για τον κάθε πολίτη που βρίσκεται σε αυτή.

~> exit: Κλείνω το κάθε file που έχει γίνει fopen και ελυεθερώνω τις αντίστοιχες δομές.Για την διαγραφή της καθεμίας υπάρχουν και οι αντίστοιχες συναρτήσεις όπως οι VirusDestructor() που διαγράφει την λίστα των ασθενειών(σαν αλγόριθμος είναι ίδια με την ListDelete με την διαφορά ότι για κάθε κόμβο καλούμε και τις Destructor(για bloom filter),skiplist_destroy()),CHTDelete() για διαγραφή του citizen hashtable και ListofListsDelete(countries), γιατην διαφραφή της λίστας χωρών(όπου για κάθε κόμβο διαγράφουμε και την λίστα με pointers σε citizens).
